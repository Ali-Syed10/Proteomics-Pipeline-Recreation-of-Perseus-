```{r proteomics, include FALSE}
Protein.Data = read.delim(file.choose(), sep = "\t")
Protein.Data.Impute = impute_normal(Protein.Data)
Protein.Data.Impute$Reverse[is.na(Protein.Data.Impute$Reverse)] <- ''
Protein.Data.Impute$Potential.contaminant[is.na(Protein.Data.Impute$Potential.contaminant)] <- ''
Processed.Data <- Protein.Data.Impute[which(Protein.Data.Impute$Potential.contaminant != '+' & Protein.Data.Impute$Reverse != '+'),]
```

# Prelimnery Data Analysis 

The first part of the analysis is getting a deep understanding of the quality of data. The Maxquant output file is checked for quality by comparing the pre-filtered data (entries identified as contaminant not removed) with filtered data. This particular manipulation is then visualized through a bar plot. 

```{r pressure, echo=FALSE}
Al = cbind(dim(Protein.Data)[1], dim(Processed.Data)[1])
Al = as.data.frame(Al)
colnames(Al) = c("Pre-Filtered", "Filtered")
rownames(Al) = c("Count")
Al  = melt(Al)
ggplot(Al, aes(x=variable, y = value, fill = variable), width=0.9) + geom_bar(stat="identity", width = 0.1)
ggsave("fill.png")
```


# Correlation Visualization Among LFQ Intensity Columns through ggpairs. 

```{r, include=FALSE}
Pr = Processed.Data[ , grepl( "LFQ.intensity." , names(Processed.Data) ) ]
ggpairs(Pr)
```


Moving forward, missing values are measured and compared across all the samples through a bar plot visualization as well. The measurements being used are LFQ intensities which are normalized intensities or protein abundance for both wild type and mutant PKA samples. The LFQ stands for LFQ normalization method conducted by Maxquant. 

```{r proteomics, include= TRUE}
Pr = Protein.Data[which(Protein.Data$Potential.contaminant != '+' & Protein.Data.Impute$Reverse != '+'),]
Pr = Pr[ , grepl( "LFQ.intensity." , names(Pr) ) ]
Missing = colSums(Pr == 0)
Missing = as.data.frame(Missing)
Missing = melt(Missing)
Missing$variable = colnames(Pr)
ggplot(Missing, aes(x=variable, y = value, fill = variable), width=0.9) + geom_bar(stat="identity", width = 0.2) + scale_x_discrete(guide = guide_axis(n.dodge=2))
```


In the Maxquant “.txt” file, there is a count of unique peptide given for each of the proteins. The unique peptide is the number of distinct peptides identified for each protein. Plotting its distribution can give indication of the frequency of unique peptides found across proteins which eventually can lead to an understanding of the significant difference between most proteins. 

```{r proteomics, include= TRUE}
Unique.Peptide.Distribution(Processed.Data)
```

The sequence length distribution as the name tells shows a visualization of length of sequences of the proteins in the Maxquant output. This information can be very helpful when it comes to sequences alignment and identifying the length range significant proteins fall in. 

```{r proteomics, include= TRUE}
Sequence.Length.Distribution(Processed.Data)
```

```{r, include=TRUE}
Score.Distribution(Processed.Data)
```

Sequence coverage deals with the how much the identified peptide in the longest sequence covers percentage wise other sequences. The analysis is done by building a box plot and using them to compare across the wild type and mutant PKA samples. This gives a good indication of differences in quality between samples. Often you will see numbers will not be that high. However, there will be certain values that exceed expectations which will then be presented as outliers and these outliers are extracted in the pipeline. 

```{r, include=TRUE}
Seq.Coverage.Comparison(Processed.Data)

```


The output researchers are mostly interested in are the LFQ intensities. These values are protein abundance measures. The R pipeline follows the protocol of Perseus where the abundances are converted to log2 values for better comparison. After the conversion the values that are missing are imputed through normal distribution. After imputation the lFQ intensities are compared and this is done through a visualization of boxplot. The LFQ intensities median across samples are compared and they should almost align with each other. This proves that there is very little bias and appropriate for comparison. The outliers if any present are also extracted in this step. 

```{r, include=TRUE}
LFQ.Comparison(Processed.Data)
Pr = Processed.Data[ , grepl( c("LFQ.") , names(Processed.Data) ) ]
Col = colnames(Pr)
dat.m <- melt(Pr,id.vars= Col, measure.vars= Col)
dat.m$Protein_ID = rep(Processed.Data$Majority.protein.IDs, length(Col))
lower_bound <- quantile(dat.m$value, 0.025)
Upper_bound <- quantile(dat.m$value, 0.975)
outlier_ind <- which(dat.m$value < lower_bound | dat.m$value > Upper_bound)
save = dat.m[outlier_ind,]
variable = as.character(save$variable)
save.1 = as.data.frame(cbind(variable, save$value, save$Protein_ID))
length(unique(save$Protein_ID))
colnames(save.1) = c("Sample", "Value", "Protein_ID")
View(save.1)
```

The visualization of correlation is done through correlation plot. The visualization can tell something important between the samples of wild type and mutant whereby identifying a fundamental difference between treatments. If there is a significant decrease in correlation between a normal sample and treated sample, then this gives a good indication of the effect. A more ideal application of this is identifying difference in proteomics samples between cancer and normal cells. 

```{r, include=TRUE}
p = cor(Pr)
corrplot(p, method = "color", order = "hclust")
heatmap(p, margins = c(12,8))
```

In the pipeline, heatmap between samples and proteins in the samples has also been made. This makes a comparison between protein abundances overall interesting and produces a good visual. 

```{r, include = TRUE}
Pr = Processed.Data[ , grepl( c("LFQ.") , names(Processed.Data) ) ]
rownames(Pr) = Processed.Data[ , grepl( c("Majority.") , names(Processed.Data) ) ]
Pr = as.matrix(Pr)
class(Pr)
col = c("#FF0000", "#FF0000", "#FF0000")
par(mar=c(7,4,4,2)+0.1) 
png(filename='test.png', width=800, height=750)
heatmap.2(Pr, col=redgreen(75), scale="row" , key=TRUE, symkey=FALSE, density.info="none",cexRow=1,cexCol=1,margins=c(12,8),trace="none",srtCol=45)

```

The wildtype and mutant samples are extracted from the Maxquant output and average for each protein abundance is calculated for both wildtype and mutant samples. The t.test is then conducted between each protein abundances of wildtype and mutant average values and p-values are obtained. The difference between average of means is also calculated giving a log fold change. The p-values are converted to log10 p-values and multiplied by -1 to give all positive values. The volcano plot in then produced where x-axis is log fold change and y-axis is   -log10(pvalue). The plot is interactive. A data frame of all these values is produced and extracted as well. The p-values are adjusted using FDR method and the significant are then extracted where adjusted p-value is less than 0.05 significance level. 

```{r}
Protein.LFQ = Processed.Data[ , grepl( c("LFQ.") , names(Processed.Data) ) ]
rownames(Protein.LFQ) = Processed.Data[ , grepl( c("Majority.") , names(Processed.Data) ) ]
WTDF = Protein.LFQ[,1:4]
MTDF = Protein.LFQ[,5:8]
Final = Prot.stat(MTDF, WTDF)

Final = data.frame(Final, rownames(Final))

Protein.sig = Final[Final$ < 0.05,]
de <- merge(Protein.LFQ, Protein.sig, by=0, all=TRUE)
de = na.omit(de)
rownames(de) = de$Row.names

View(de)

plot_ly(data = Final, x = Final$log.fold.change, y = Final$P.val.log, text = rownames(Final), color = Final$P.ad ) %>%  layout(title ="Volcano Plot") %>% layout(annotations = a)
```


Using the LFQ intensities of significant proteins a principal component analysis plot is produced to learn what extent the significant proteins are different. The method is not done on significant proteins and this pipeline is the first one to do so. The technique works because where proteins were grouped were compared and the gene ontologies were very similar. This also defines in what kind of process significant proteins are involved in. 

```{r}
Protein.de = de[ , grepl( c("LFQ.") , names(de) ) ]
prco = prcomp(Protein.de, scale. = TRUE)
fviz_eig(prco)
fviz_pca_ind(prco, repel = TRUE)
```

# Clustering Between Significant Proteins

``` {r}
rownames(Protein.de) = de$Row.names
d <- dist(Protein.de, method = "euclidean")
hc1 <- hclust(d, method = "complete" )
plot(hc1, cex = 0.6, hang = -1)
