FGK = read.csv(file.choose())

Test.1 = merge.data.frame(FGK, Site.0, by = "Entry")
Test.1 = strsplit(Test.1$Gene.ontology.IDs, ";")
Test.1 = unlist(Test.1)
Test.2 = Term(Test.1)
Test.3 = Ontology(Test.1)
Final.test = data.frame(Test.1, Test.2, Test.3)

Molecular.functions = Final.test[Final.test$Test.3 == "MF", ]

Molecular.functions = na.omit(Molecular.functions)

Molecular.functions = Molecular.functions %>% mutate(match = str_extract(Test.2, "ATP binding|DNA binding|hydrolase activity|activity|binding|oxidoreductase activity|protein|ribosome|RNA binding|rRNA|transcription|transferase|translation"))

Molecular.functions = data.frame(table(Molecular.functions$match))
Molecular.functions$type = "No of Sites 0"

Sit.0 = Molecular.functions


Test.1 = merge.data.frame(FGK, Site.1, by = "Entry")
Test.1 = strsplit(Test.1$Gene.ontology.IDs, ";")
Test.1 = unlist(Test.1)
Test.2 = Term(Test.1)
Test.3 = Ontology(Test.1)
Final.test = data.frame(Test.1, Test.2, Test.3)

Molecular.functions = Final.test[Final.test$Test.3 == "MF", ]

Molecular.functions = na.omit(Molecular.functions)

Molecular.functions = Molecular.functions %>% mutate(match = str_extract(Test.2, "ATP binding|DNA binding|hydrolase activity|activity|binding|oxidoreductase activity|protein|ribosome|RNA binding|rRNA|transcription|transferase|translation"))

Molecular.functions = data.frame(table(Molecular.functions$match))
Molecular.functions$type = "No of Sites 1"

Sit.1 = Molecular.functions




Test.1 = merge.data.frame(FGK, Site.2, by = "Entry")
Test.1 = strsplit(Test.1$Gene.ontology.IDs, ";")
Test.1 = unlist(Test.1)
Test.2 = Term(Test.1)
Test.3 = Ontology(Test.1)
Final.test = data.frame(Test.1, Test.2, Test.3)

Molecular.functions = Final.test[Final.test$Test.3 == "MF", ]

Molecular.functions = na.omit(Molecular.functions)

Molecular.functions = Molecular.functions %>% mutate(match = str_extract(Test.2, "ATP binding|DNA binding|hydrolase activity|activity|binding|oxidoreductase activity|protein|ribosome|RNA binding|rRNA|transcription|transferase|translation"))

Molecular.functions = data.frame(table(Molecular.functions$match))
Molecular.functions$type = "No of Sites 2"

Sit.2 = Molecular.functions




Test.1 = merge.data.frame(FGK, Site.3, by = "Entry")
Test.1 = strsplit(Test.1$Gene.ontology.IDs, ";")
Test.1 = unlist(Test.1)
Test.2 = Term(Test.1)
Test.3 = Ontology(Test.1)
Final.test = data.frame(Test.1, Test.2, Test.3)

Molecular.functions = Final.test[Final.test$Test.3 == "MF", ]

Molecular.functions = na.omit(Molecular.functions)

Molecular.functions = Molecular.functions %>% mutate(match = str_extract(Test.2, "ATP binding|DNA binding|hydrolase activity|activity|binding|oxidoreductase activity|protein|ribosome|RNA binding|rRNA|transcription|transferase|translation"))

Molecular.functions = data.frame(table(Molecular.functions$match))
Molecular.functions$type = "No of Sites 3"

Sit.3 = Molecular.functions




Test.1 = merge.data.frame(FGK, Site.4, by = "Entry")
Test.1 = strsplit(Test.1$Gene.ontology.IDs, ";")
Test.1 = unlist(Test.1)
Test.2 = Term(Test.1)
Test.3 = Ontology(Test.1)
Final.test = data.frame(Test.1, Test.2, Test.3)

Molecular.functions = Final.test[Final.test$Test.3 == "MF", ]

Molecular.functions = na.omit(Molecular.functions)

Molecular.functions = Molecular.functions %>% mutate(match = str_extract(Test.2, "ATP binding|DNA binding|hydrolase activity|activity|binding|oxidoreductase activity|protein|ribosome|RNA binding|rRNA|transcription|transferase|translation"))

Molecular.functions = data.frame(table(Molecular.functions$match))
Molecular.functions$type = "No of Sites 4"

Sit.4 = Molecular.functions



Test.1 = merge.data.frame(FGK, Site.5, by = "Entry")
Test.1 = strsplit(Test.1$Gene.ontology.IDs, ";")
Test.1 = unlist(Test.1)
Test.2 = Term(Test.1)
Test.3 = Ontology(Test.1)
Final.test = data.frame(Test.1, Test.2, Test.3)

Molecular.functions = Final.test[Final.test$Test.3 == "MF", ]

Molecular.functions = na.omit(Molecular.functions)

Molecular.functions = Molecular.functions %>% mutate(match = str_extract(Test.2, "ATP binding|DNA binding|hydrolase activity|activity|binding|oxidoreductase activity|protein|ribosome|RNA binding|rRNA|transcription|transferase|translation"))

Molecular.functions = data.frame(table(Molecular.functions$match))
Molecular.functions$type = "No of Sites 5"

Sit.5 = Molecular.functions




Test.1 = merge.data.frame(FGK, Site.6, by = "Entry")
Test.1 = strsplit(Test.1$Gene.ontology.IDs, ";")
Test.1 = unlist(Test.1)
Test.2 = Term(Test.1)
Test.3 = Ontology(Test.1)
Final.test = data.frame(Test.1, Test.2, Test.3)

Molecular.functions = Final.test[Final.test$Test.3 == "MF", ]

Molecular.functions = na.omit(Molecular.functions)

Molecular.functions = Molecular.functions %>% mutate(match = str_extract(Test.2, "ATP binding|DNA binding|hydrolase activity|activity|binding|oxidoreductase activity|protein|ribosome|RNA binding|rRNA|transcription|transferase|translation"))

Molecular.functions = data.frame(table(Molecular.functions$match))
Molecular.functions$type = "No of Sites 6"

Sit.6 = Molecular.functions


Test.1 = merge.data.frame(FGK, Site.7, by = "Entry")
Test.1 = strsplit(Test.1$Gene.ontology.IDs, ";")
Test.1 = unlist(Test.1)
Test.2 = Term(Test.1)
Test.3 = Ontology(Test.1)
Final.test = data.frame(Test.1, Test.2, Test.3)

Molecular.functions = Final.test[Final.test$Test.3 == "MF", ]

Molecular.functions = na.omit(Molecular.functions)

Molecular.functions = Molecular.functions %>% mutate(match = str_extract(Test.2, "ATP binding|DNA binding|hydrolase activity|activity|binding|oxidoreductase activity|protein|ribosome|RNA binding|rRNA|transcription|transferase|translation"))

Molecular.functions = data.frame(table(Molecular.functions$match))
Molecular.functions$type = "No of Sites 7"

Sit.7 = Molecular.functions

Combined.Site.Data = rbind(Sit.0, Sit.1, Sit.2, Sit.3, Sit.4, Sit.5, Sit.6, Sit.7)

write.csv(Combined.Site.Data, "Combined.csv")

```

# Read in the maxquant output and merge accoring to site names a step conducted above and finally represent the terms through a series a visualization. the script can be daunting but the steps are just iterations according to the number of sites which is causing the extension of the script. 

```{r}

Max.Protein.0 = read.delim(file.choose()) # Read MAxquant protein file

Max.Protein = Max.Protein.0[ , grepl( c("LFQ.") , names(Max.Protein.0) ) ] # Extract LFQ intensities columns

Max.Protein = impute_normal(Max.Protein) # log and impute values

Max.Protein.1 = Max.Protein[ , grepl( c("LFQ.intensity.PK") , names(Max.Protein) ) ]  # Extract Mutant Type LFQ, may need to specify the columns if names are defined as .PK

Max.Protein.1 = apply(Max.Protein.1,1, function(x) mean(x)) #calculate means for each protein across samples

Max.Protein.2 = Max.Protein[ , grepl( c("LFQ.intensity.WT") , names(Max.Protein) ) ]  # Extract Wild Type LFQ, may need to specify the columns if names are defined as .WT

Max.Protein.2 = apply(Max.Protein.2,1, function(x) mean(x))  #calculate means for each protein across samples

Max.Protein.3 = data.frame(Max.Protein.0$Majority.protein.IDs,Max.Protein.1,Max.Protein.2)

Max.Protein.4 = Max.Protein.3 %>% mutate(name=strsplit(Max.Protein.0.Majority.protein.IDs, ";")) 

Max.Protein.4 = unnest(Max.Protein.4) # Makes the duplicates for protein ids that are present as a double in maxquant output. But the LFQ mean intensities will be the same thus bias for these small proteins

Max.Protein.4 = data.frame(Max.Protein.4$name, Max.Protein.4$Max.Protein.1, Max.Protein.4$Max.Protein.2)

colnames(Max.Protein.4) = c("Entry", "tg.1", "tg.2")



Max.Protein.4$fold = (Max.Protein.4$tg.2/Max.Protein.4$tg.1) # Calculate log fold change for each protein. PKA - WT where positive numbers are abundant in PKA mutant

Max.Protein.5 = merge.data.frame(FGK,Max.Protein.4, by = "Entry")

abu.wt = Max.Protein.5 %>% mutate(name=strsplit(Gene.ontology.IDs, ";")) # Proper Extraction of Gene ontology terms
abu.wt = unnest(abu.wt) # Keeping double values in single rows and duplicates
wt = data.frame(abu.wt$name, abu.wt$fold) # Extract Gene ontologies with fold change values of proteins
colnames(wt) = c("ID", "Fold") # Rename columns

wt = wt %>% mutate(Term = Term(ID)) %>% mutate(Onto = Ontology(ID)) # Getting Gene ontology IDs using Go.Db package

mf.wt = wt[wt$Onto == "MF",] # Molecular Function Extraction

mf.wt = na.omit(mf.wt) # Omit rows with missing values

mf.wt = mf.wt %>% mutate(match = str_extract(Term, "ATP binding|RNA binding|ribosome|nucleic acid binding|DNA binding|oxidoreductase activity|GTPase activity|kinase|translation|DNA|translation|tRNA|kinase|transferase|activity|binding|protein"))

mf.wt.1 = mf.wt[mf.wt$Fold < 1, ] # Extract values less than 0 and assign with type down
mf.wt.1$Type = "Down"
mf.wt.2 = mf.wt[mf.wt$Fold > 1, ] # Extract values greater than 0 and assign with type up
mf.wt.2$Type = "Up"

mf = rbind(mf.wt.1, mf.wt.2) #Create new data frame
mf = data.frame(mf$match, mf$Type) # Create new type 
mf = table(mf) # Create Frequency Table for each terms according to up and down

mf = data.frame(mf) # Conversion to data frame format

mf$Percent = (mf$Freq / sum(mf$Freq))*100 # Percentages

New.mf = mf[mf$mf.Type == "Down",] # For Molecular functions assigned as down where down means decrease in proteins get the negative percentages to get an up and down bar chart for each terms
New.mf$Percent = (New.mf$Percent)*-1

New.mf.1 = mf[mf$mf.Type == "Up",] # Extraction of Up terms

MF.bar.chart = rbind(New.mf,New.mf.1)

ggplot(MF.bar.chart, aes(x = MF.bar.chart$mf.match, y = MF.bar.chart$Percent, fill = MF.bar.chart$mf.Type)) + geom_bar(stat = "identity") + xlab("") + ylab("Percentage of Proteins") + ggtitle("Percentage of Proteins Abundant and Decreased in Mutant  By GO Terms") + scale_fill_discrete(name = "Legend") + scale_x_discrete(guide = guide_axis(n.dodge=2))

write.csv(MF.bar.chart, "MF.bar.chart.csv") # Export and Produce Image in Either Excel or Tableau (Highly Recommended )

BP.wt = wt[wt$Onto == "BP",] # Biological Function Extraction

BP.wt = na.omit(BP.wt) # Omit rows with missing values

BP.wt = BP.wt %>% mutate(match = str_extract(Term, "transport|catabolic|biosynthetic|tRNA|translation|transcription|signal|metabolic|assimilation|assembly|rRNA|RNA|ribosomal|ribosome|regulation|protein|mRNA|cell"))  # Biological Terms

BP.wt.1 = BP.wt[BP.wt$Fold < 0, ] # Extract values less than 0 and assign with type down
BP.wt.1$Type = "Down"
BP.wt.2 = BP.wt[BP.wt$Fold > 0, ] # Extract values greater than 0 and assign with type up
BP.wt.2$Type = "Up"

BP = rbind(BP.wt.1, BP.wt.2) #Create new data frame
BP = data.frame(BP$match, BP$Type) # Create new type 
BP = table(BP) # Create Frequency Table for each terms according to up and down

BP = data.frame(BP) # Conversion to data frame format

BP$Percent = (BP$Freq / sum(BP$Freq))*100 # Percentages

New.BP = BP[BP$BP.Type == "Down",] # For Molecular functions assigned as down where down means decrease in proteins get the negative percentages to get an up and down bar chart for each terms
New.BP$Percent = (New.BP$Percent)*-1

New.BP.1 = BP[BP$BP.Type == "Up",] # Extraction of Up terms

BP.bar.chart = rbind(New.BP,New.BP.1)

View(BP.bar.chart)

ggplot(BP.bar.chart, aes(x = BP.bar.chart$BP.match, y = BP.bar.chart$Percent, fill = BP.bar.chart$BP.Type)) + geom_bar(stat = "identity")  + xlab("") + ylab("Percentage of Proteins") + ggtitle("Percentage of Proteins Abundant and Decreased in Mutant  By GO Terms") + scale_fill_discrete(name = "Legend") + scale_x_discrete(guide = guide_axis(n.dodge=2))


CC.wt = wt[wt$Onto == "CC",] # cell component Function Extraction

CC.wt = CC.wt %>% mutate(match = str_extract(Term, "transport|catabolic|biosynthetic|tRNA|translation|transcription|signal|metabolic|assimilation|assembly|rRNA|RNA|ribosomal|ribosome|regulation|protein|mRNA|cell|cytoplasm|membrane|integral component of membrane|endoplasmic reticulum|proteasome complex|nucleosome|complex|nucleus|signal|Golgi|nucleolus|nucleolus|mitochondrion|chromosome")) # Biological Terms

CC.wt = na.omit(CC.wt) # Omit rows with missing values

View(CC.wt)

CC.wt.1 = CC.wt[CC.wt$Fold < 0, ] # Extract values less than 0 and assign with type down
CC.wt.1$Type = "Down"
CC.wt.2 = CC.wt[CC.wt$Fold > 0, ] # Extract values greater than 0 and assign with type up
CC.wt.2$Type = "Up"

CC = rbind(CC.wt.1, CC.wt.2) #Create new data frame
CC = data.frame(CC$match, CC$Type) # Create new type 
CC = table(CC) # Create Frequency Table for each terms according to up and down

CC = data.frame(CC) # Conversion to data frame format

CC$Percent = (CC$Freq / sum(CC$Freq))*100 # Percentages

New.CC= CC[CC$CC.Type == "Down",] # For Molecular functions assigned as down where down means decrease in proteins get the negative percentages to get an up and down bar chart for each terms
New.CC$Percent = (New.CC$Percent)*-1

New.CC.1 = CC[CC$CC.Type == "Up",] # Extraction of Up terms

CC.bar.chart = rbind(New.CC,New.CC.1) # Production of data frame

ggplot(CC.bar.chart, aes(x = CC.bar.chart$CC.match, y = CC.bar.chart$Percent, fill = CC.bar.chart$CC.Type)) + geom_bar(stat = "identity")  + xlab("") + ylab("Percentage of Proteins") + ggtitle("Percentage of Proteins Abundant and Decreased in Mutant  By GO Terms") + scale_fill_discrete(name = "Legend") + scale_x_discrete(guide = guide_axis(n.dodge=2))

```
